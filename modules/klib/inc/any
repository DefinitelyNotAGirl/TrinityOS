/*
 * Created Date: Friday May 19th 2023
 * Author: DefinitelyNotAGirl@github
 * -----
 * Last Modified: Wednesday May 24th 2023 7:20:27 am
 * Modified By: DefinitelyNotAGirl@github (definitelynotagirl115169@gmail.com)
 * -----
 * Copyright (c) 2023 DefinitelyNotAGirl@github
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#pragma once

#include <stdint>
#include <string>
#include <list>

namespace klib
{
    #define KLIB_ANY_ISUINT(id) id == anyTypeId::UINT64 || id == anyTypeId::UINT32 || id == anyTypeId::UINT16 || id == anyTypeId::UINT8
    #define KLIB_ANY_ISSINT(id) id == anyTypeId::INT64 || id == anyTypeId::INT32 || id == anyTypeId::INT16 || id == anyTypeId::INT8
    #define KLIB_ANY_ISFLOAT(id) id == anyTypeId::FLOAT64 || id == anyTypeId::FLOAT32
    enum class anyTypeId
    {
        UINT64,UINT32,UINT16,UINT8,INT64,INT32,INT16,INT8,STRING_UTF8,FLOAT32,FLOAT64,BOOLEAN
    };

    class any
    {
    public:
        anyTypeId typeId;

        //data
        u64 unsignedInt;
        i64 signedInt;
        f64 floatingPoint;
        string stringValue;

    public:

        //
        //constructors
        //
        //uint
        any(u64 x);
        any(u32 x);
        any(u16 x);
        any(u8 x);
        //int
        any(i64 x);
        any(i32 x);
        any(i16 x);
        any(i8 x);
        //f32
        any(f32 f);
        any(f64 f);
        //misc
        any(string s);
        any(bool b);

        //
        //conversion operators
        //
        //uint
        operator u64() const;
        operator u32() const;
        operator u16() const;
        operator u8() const;
        //int
        operator i64() const;
        operator i32() const;
        operator i16() const;
        operator i8() const;
        //float
        operator f32() const;
        operator f64() const;
        //misc
        operator string() const;

        //
        // misc
        //
        anyTypeId getType() const;
    };
}
