/*
 * Created Date: Thursday May 25th 2023
 * Author: DefinitelyNotAGirl@github
 * -----
 * Last Modified: Thursday May 25th 2023 2:13:38 am
 * Modified By: DefinitelyNotAGirl@github (definitelynotagirl115169@gmail.com)
 * -----
 * Copyright (c) 2023 DefinitelyNotAGirl@github
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdint>
namespace paging
{
    class PDE
    {
    public:
        uint64_t* e;

        PDE(uint64_t* e);

        //misc
        void setPhysicalPageBaseAddress(uint64_t addr);
        bool isDirty();
        bool wasAccessed();

        //enable
        void enableGlobal();
        void enablePageCache();
        void enablePageWriteThrough();
        void enableSupervisorOnly();
        void enableWrite();
        void enablePresent();
        void enableExecute();

        //disable
        void disableGlobal();
        void disablePageCache();
        void disablePageWriteThrough();
        void disableSupervisorOnly();
        void disableWrite();
        void disablePresent();
        void disableExecute();
    };

    class PDPE
    {
    public:
        uint64_t* e;

        PDPE(uint64_t* e);

        //misc
        void setPhysicalPageBaseAddress(uint64_t addr);
        bool wasAccessed();

        //enable
        void enablePageCache();
        void enablePageWriteThrough();
        void enableSupervisorOnly();
        void enableWrite();
        void enablePresent();
        void enableExecute();

        //disable
        void disablePageCache();
        void disablePageWriteThrough();
        void disableSupervisorOnly();
        void disableWrite();
        void disablePresent();
        void disableExecute();
    };

    class PML4E
    {
    public:
        uint64_t* e;

        PML4E(uint64_t* e);

        //misc
        void setPhysicalPageBaseAddress(uint64_t addr);
        bool wasAccessed();

        //enable
        void enablePageCache();
        void enablePageWriteThrough();
        void enableSupervisorOnly();
        void enableWrite();
        void enablePresent();
        void enableExecute();

        //disable
        void disablePageCache();
        void disablePageWriteThrough();
        void disableSupervisorOnly();
        void disableWrite();
        void disablePresent();
        void disableExecute();
    };

    class PML5E
    {
    public:
        uint64_t* e;

        PML5E(uint64_t* e);

        //misc
        void setPhysicalPageBaseAddress(uint64_t addr);
        bool wasAccessed();

        //enable
        void enablePageCache();
        void enablePageWriteThrough();
        void enableSupervisorOnly();
        void enableWrite();
        void enablePresent();
        void enableExecute();

        //disable
        void disablePageCache();
        void disablePageWriteThrough();
        void disableSupervisorOnly();
        void disableWrite();
        void disablePresent();
        void disableExecute();
    };
}