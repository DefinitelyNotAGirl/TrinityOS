/**
 * Created Date: Saturday February 3rd 2024
 * Author: Lilith
 * -----
 * Last Modified: Saturday February 3rd 2024 1:09:35 am
 * Modified By: Lilith (definitelynotagirl115169@gmail.com)
 * -----
 * Copyright (c) 2024 Lilith
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdint.h2>

class EFI_HANDLE extends primitive64;

class EFI_GUID extends primitive64,primitive64;

class EFI_CONFIGURATION_TABLE:
    EFI_GUID guid;
    u64 address;

class EFI_SIMPLE_TEXT_INPUT_PROTOCOL extends primitive0;
class EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL extends primitive0;

class EFI_RUNTIME_SERVICES extends primitive0;

class EFI_BOOT_SERVICES extends primitive0;

class EFI_TABLE_HEADER:
    u64 signature;
    u32 revision;
    u32 headerSize;
    u32 crc32;
    u32 reserved;

class EFI_SYSTABLE:
    /// The table header for the EFI System Table.
    (+0) EFI_TABLE_HEADER Hdr;
    /// A pointer to a null terminated string that identifies the vendor
    /// that produces the system firmware for the platform.
    (+24) char* FirmwareVendor;
    /// A firmware vendor specific value that identifies the revision
    /// of the system firmware for the platform.
    (+32) u32 FirmwareRevision;
    /// The handle for the active console input device. This handle must support
    /// EFI_SIMPLE_TEXT_INPUT_PROTOCOL and EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL.
    (+40) EFI_HANDLE ConsoleInHandle;
    /// A pointer to the EFI_SIMPLE_TEXT_INPUT_PROTOCOL interface that is
    /// associated with ConsoleInHandle.
    (+48) EFI_SIMPLE_TEXT_INPUT_PROTOCOL* ConIn;
    /// The handle for the active console output device.
    (+56) EFI_HANDLE ConsoleOutHandle;
    /// A pointer to the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL interface
    /// that is associated with ConsoleOutHandle.
    (+64) EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* ConOut;
    /// The handle for the active standard error console device.
    /// This handle must support the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL.
    (+72) EFI_HANDLE StandardErrorHandle;
    /// A pointer to the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL interface
    /// that is associated with StandardErrorHandle.
    (+80) EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL* StdErr;
    /// A pointer to the EFI Runtime Services Table.
    (+88) EFI_RUNTIME_SERVICES* RuntimeServices;
    /// A pointer to the EFI Boot Services Table.
    (+96) EFI_BOOT_SERVICES* BootServices;
    /// The number of system configuration tables in the buffer ConfigurationTable.
    (+104) u64 NumberOfTableEntries;
    /// A pointer to the system configuration tables.
    /// The number of entries in the table is NumberOfTableEntries.
    (+112) EFI_CONFIGURATION_TABLE* ConfigurationTable;

SYMBOL-tripleFault noreturn void sysKill(u64 exitCode);

extern SYMBOL-__sys_hang void __sys_hang();
extern ABI-Microsoftx64 SYMBOL-__sys_helloworld u64 __sys_helloworld(EFI_HANDLE image,EFI_SYSTABLE* table);

extern ABI-Microsoftx64 SYMBOL-__sys_print_counter void print_counter(u64 count);
extern ABI-Microsoftx64 SYMBOL-__sys_print_mcfgDesc void print_mcfgDesc();

class ACPI_HEADER:
    (+0) u32 Signature;
    (+4) u32 Length;
    (+8) u8  Revision;
    (+9) u8  Checksum;
    (+10) u8[6] OEMID;
    (+16) u8[8] OEMTableId;
    (+24) u32 OEMRevision;
    (+28) u32 CreatorID;
    (+32) u32 CreatorRevision;
    (+36) u64 Reserved;

class mcfgDescriptor:
    (+0) u64 address;
    (+8) u16 PCISegmentGroupNumber;
    (+10) u8 StartPCIBusNumber;
    (+11) u8 EndPCIBusNumber;
    (+12) u32 Reserved;

class mcfg:
    (+0) u32 Signature;
    (+4) u32 Length;
    (+8) u8  Revision;
    (+9) u8  Checksum;
    (+10) u8[6] OEMID;
    (+16) u8[8] OEMTableId;
    (+24) u32 OEMRevision;
    (+28) u32 CreatorID;
    (+32) u32 CreatorRevision;
    (+36) u64 Reserved;
    (+44) mcfgDescriptor[1] descriptors;

SYMBOL-acpi_table_proc_MCFG__inactive u64 acpi_table_proc_MCFG(mcfg* table):
    (rsi) u32 __descCount = table->Length;
    (rsi) u64 descCount;
    descCount -= 0d44;
    descCount /= 0d16;
    print_counter(descCount);
    return 0;

SYMBOL-main ABI-Microsoftx64 u64 EFI_entry(EFI_HANDLE efi_image,EFI_SYSTABLE* efi_table):
    //(rdx) EFI_TABLE_HEADER* head;
    (r8) EFI_SYSTABLE* systable = efi_table;
    __sys_helloworld(efi_image,efi_table);
    __sys_hang();
    return 0;